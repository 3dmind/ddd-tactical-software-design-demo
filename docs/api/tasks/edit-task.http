### Login

POST http://localhost:{{port}}/users/login
Content-Type: application/json

{
  "username": "{{username}}",
  "password": "{{password}}"
}

> {%
  client.test('Request executed successfully', function() {
    client.assert(response.status === 200, 'Response status is not 200')
  })
  client.global.set("access_token", response.body.access_token);
  %}

### Note a new task

POST http://localhost:{{port}}/tasks
Authorization: Bearer {{access_token}}
Content-Type: application/json

{
  "text": "{{text}}"
}

> {%
  client.test('Request executed successfully', function() {
    client.assert(response.status === 201, 'Response status is not 201')
  })
  client.test('Task was created successfully', function() {
    client.assert(response.body.hasOwnProperty('id'), 'Cannot find \'id\' property')
    client.assert(response.body.id !== null, 'Task ID is not defined')
    client.assert(response.body.hasOwnProperty('isTickedOff'), 'Cannot find \'isTickedOff\' property')
    client.assert(response.body.isTickedOff === false, 'Task is ticked-off')
  })
  client.global.set('taskId', response.body.id);
  %}

### Edit the task description

POST http://localhost:{{port}}/tasks/{{taskId}}/edit
Authorization: Bearer {{access_token}}
Content-Type: application/json

{
  "text": "{{newText}}"
}

> {%
  client.test('Request executed successfully', function() {
    client.assert(response.status === 200, 'Response status is not 200')
  })
  client.test('Task description was edited', function() {
    client.assert(response.body.hasOwnProperty('description'), 'Cannot find \'description\' property')
    client.assert(response.body.description === 'Lorem ipsum', 'Description was not edited')
    client.assert(response.body.hasOwnProperty('editedAt'), 'Cannot find \'editedAt\' property')
    client.assert(response.body.editedAt !== null, 'Edit date is not defined')
  })
  %}
